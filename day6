from collections import Counter
def check_poker_hand(hand):
    counts = Counter(hand)

    if max(counts.values()) == 5:
        return "Five of a kind"

    if max(counts.values()) == 4:
        return "Four of a kind"

    if sorted(counts.values()) == [2, 3]:
        return "Full house"

    if max(counts.values()) == 3:
        return "Three of a kind"

    if sorted(counts.values()) == [1, 2, 2]:
        return "Two pair"

    if sorted(counts.values()) == [1, 1, 1, 2]:
        return "One pair"

    return "High card"


class Card:
    def __init__(self, type, cards, bid,rank):
        self.type = type
        self.cards = cards
        self.bid = bid
        self.rank = rank
        if self.rank == "High card":
            ranknumber = 0;
        elif self.rank == "One pair":
            ranknumber = 1;
        elif self.rank == "Two pair":
            ranknumber = 2;
        elif self.rank == "Three of a kind":
            ranknumber = 3;
        elif self.rank ==  "Full house":
            ranknumber = 4;
        elif self.rank ==  "Four of a kind":
            ranknumber = 5;
        elif self.rank == "Five of a kind":
            ranknumber = 6;
        self.ranknumber = ranknumber
        self.sorted =0

def sorting(cards):
    for i in range(len(cards)):
        card = cards[i]
        for j in range(i+1,len(cards)):
            othercard = cards[j]
            for k in range(0,4):
                if card.cards[k]==othercard.cards[k]:
                    continue
                elif getcardvalue1(card.cards[k]) > getcardvalue1(othercard.cards[k]):
                    cards[i].sorted +=1
                    break
                elif getcardvalue1(card.cards[k]) < getcardvalue1(othercard.cards[k]):
                    cards[j].sorted +=1
    sorted_hands = sorted(cards, key=lambda Card:(Card.sorted))
    return sorted_hands


def custom_sorting_rule_1(hand):
    return getcardvalue1(hand.cards[0])

def getcardvalue1(card):
    values = 'AKQJT98765432'
    return len(values)-values.index(card)
def perform_solution(input):
    inputlines= input.splitlines()
    cardArray =[]
    for entry in inputlines:
        init_card = Card(0,entry.split(' ')[0],entry.split(' ')[1],check_poker_hand(entry.split(' ')[0]))
        cardArray.append(init_card)
    sorted_hands = sorted(cardArray, key=lambda Card:(Card.ranknumber))
    hands = []
    high_cards = [card for card in sorted_hands if card.rank == "High card"]
    hands.extend(sorting(high_cards))
    one_pair = [card for card in sorted_hands if card.rank == "One pair"]
    hands.extend(sorting(one_pair))
    two_pair = [card for card in sorted_hands if card.rank == "Two pair"]
    hands.extend(sorting(two_pair))
    three_kind = [card for card in sorted_hands if card.rank == "Three of a kind"]
    hands.extend(sorting(three_kind))
    full_house_hands = [card for card in sorted_hands if card.rank == "Full house"]
    hands.extend(sorting(full_house_hands))
    Four_kind = [card for card in sorted_hands if card.rank == "Four of a kind"]
    hands.extend(sorting(Four_kind))
    five_kind = [card for card in sorted_hands if card.rank == "five_kind"]
    hands.extend(sorting(five_kind))

    for hand in hands:
        print(hand.ranknumber)








    print("not implemented yet")
def perform_solution2(input):
    print("solution 2 not implemented yet")

if __name__ == '__main__':
    input_test = """32T3K 765
T55J5 684
KK677 28
KTJJT 220
QQQJA 483"""
    solution_test1 = 13
    if (solution_test1== perform_solution(input_test)):
        print("Test 1 succesfull")


    input_actual =""""""
    print(perform_solution(input_actual))
    solution_test2 = 30
    if (solution_test2== perform_solution2(input_test)):
         print("Test 2 succesfull")

    print(perform_solution2(input_actual))
